name: Create PR base <- develop if master is merged to develop

on:
  pull_request:
    types:
      - closed
    branches:
      - develop

jobs:
  create-pr:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' && github.event.pull_request.head.ref == 'master'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Debug: Print the current date
      - name: Print current date
        run: date -u

      # Debug: Calculate and print the past date
      - name: Calculate and print past date
        run: |
          PAST_DATE=$(date -u -d "-3 months" +"%Y-%m-%d")
          echo "Past date: $PAST_DATE"
          echo "PAST_DATE=$PAST_DATE" >> $GITHUB_ENV

      # Debug: List all base branches with commit dates
      - name: List all base branches with commit dates
        run: |
          git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)' refs/remotes/origin/base/

      # Debug: Check each branch's date against the past date
      - name: Check branch dates
        run: |
          PAST_DATE=$(date -u -d "-3 months" +"%Y-%m-%d")
          git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)' refs/remotes/origin/base/ | while read -r date branch; do
            if [[ "$date" > "$PAST_DATE" ]]; then
              echo "Branch $branch is active (committed on $date)"
            else
              echo "Branch $branch is not active (committed on $date)"
            fi
          done

      # List active base branches
      - name: List active base branches
        id: list_active_base_branches
        run: |
          PAST_DATE=$(date -u -d "-3 months" +"%Y-%m-%d")
          BRANCHES=$(git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)' refs/remotes/origin/base/ | awk -v past_date="$PAST_DATE" '$1 > past_date {print $2}')
          echo "Filtered branches: $BRANCHES"
          echo "branches=$(echo $BRANCHES | tr '\n' ' ')" >> $GITHUB_ENV

      # Debug: Print the branches from the environment variable
      - name: Print branches from environment variable
        run: "echo 'Branches: ${{ env.branches }}'"

      # Create Pull Requests from develop to base branches
      - name: Create Pull Requests from develop to base branches
        run: |
          for branch in $(echo ${{ env.branches }}); do
            TARGET_BRANCH="${branch}"
            PR_TITLE="${TARGET_BRANCH} <- develop"
            PR_BODY="Auto PR ${TARGET_BRANCH} <- develop"
            gh pr create -B "${TARGET_BRANCH}" -H develop --title "${PR_TITLE}" --body "${PR_BODY}" || echo "Failed to create PR for ${TARGET_BRANCH}"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
